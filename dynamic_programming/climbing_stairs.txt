_____________________________________________________________________________
***Climbing Stairs
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? 
――――――――――――――――――――――――――
public class Solution {
    public int climbStairs(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        int[] result=new int[n+1];
        result[0]=0;
        result[1]=1;
        result[2]=2;
        
        for(int i=3;i<n+1;i++){	
	    //result[i-1]+result[i-2]*2-result[i-2]	
            result[i]=result[i-1]+result[i-2];
        }
        return result[n];
    }
}
――――――――――――――――――――――――――――
ps:注意上述是result[i-2]*2，而不是想当然的加2，然后减掉重复的部分。
_____________________________________________________________________________

***Best Time to Buy and Sell StockII
______________________________________________________________________________________
――――――――――――――――――――――――――――――――――
public int maxProfit2(int[] prices) {
    
    	int len=prices.length;
   
    	if(len==0) return 0;
    	if(len==1) return 0;
           
	   int[] profits=new int[len];
	   int min=prices[0];
	   profits[0]=0;
	   
	   int max=0;
	   for(int i=1;i<len;i++){
	       if(prices[i]>min){
	           int profitNow=prices[i]-min;
	           if(profitNow>profits[i-1]){
	               max=max-profits[i-1]+profitNow;//*****如果新的价值更大，则减去之前已经添加的值，加上新值
                       profits[i]=profitNow;
	           }else{

                      //min值更换时当前i处的profits一定置为0，保证之后某天的股票价格比这个min大时能够得以大于更换min这天的profit
	               profits[i]=0;
	               min=prices[i];
	           }                
	       }else{
		   //min值更换时当前i处的profits一定置为0，保证之后某天的股票价格比这个min大时能够得以大于更换min这天的profit
	           profits[i]=0;
	           min=prices[i];
	       }
	       
	   }
	   return max;
}
――――――――――――――――――――――――――――――
_________________________________________________________________________________________