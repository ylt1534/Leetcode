Find Minimum in Rotated Sorted Array
将排好序的list从中间一个点打乱。如34512，找出最小值。

心得：感觉二分查找的题就是先把思路写了，然后找出几个特殊情况代入代码看结果如何，对特殊情况添加代码，如果硬是去找规律，比较困难
――――――――――――――――――――――――――――――――――――――――――
public int findMin(int[] nums) {
        
        int len=nums.length;
        
        if(len==0) return 0;
        if(len==1) return nums[0];
        
        int low=0,high=len-1,mid;
        while(low<high){
            mid=(low+high)/2;            
            if(low==mid)
                return Math.min(nums[mid],nums[high]);
            if(nums[mid]>nums[high]){
                low=mid;
            }else{
                high=mid;
            }            
            
        }
        return nums[high];
        
        
    }
――――――――――――――――――――――――――――――――――――――――――――
升级版:如果序列中存在重复元素如何处理：
如：{3，3，1，3}{1，3，3}{10，1，10，10，10}，对此三种情况进行分析，发现对于nums[mid]==nums[high]的情况，需求判断从mid到high之间索引对应的值是否有不同于nums[mid]的，如果有，则最小值在mid与high之间，否则，在low与mid之间
――――――――――――――――――――――――――――――
public int findMin(int[] nums) {
        int len=nums.length;
        
        if(len==0) return 0;
        if(len==1) return nums[0];
        
        int low=0,high=len-1,mid;
        while(low<high){
            mid=(low+high)/2;
            
            if(low==mid)
                return Math.min(nums[mid],nums[high]);
            if(nums[mid]>nums[high]){
                low=mid;
            }else if(nums[mid]<nums[high]){
                high=mid;
            }else{
                int flag=0;
                for(int u=mid+1;u<high;u++){
                    if(nums[u]!=nums[mid]){
                        flag=1;//发现存在不同，置flag为1，break出去 这里也可使用continue到外部的while循环那里
                        break ;
                    }
                }
                if(flag==0){
                    high=mid;    
                }else{
                    low=mid;
                }
            }
        }
        return nums[high];
    }
――――――――――――――――――――――――――――――――――――――――――――
Search in Rotated Sorted Array
在这种rotatedArray中查找某个数字是否存在，
思路：先找到最小值对应的下标，命名为pivot，若给定值target小于给定array的最后一个数值，则在pivot到len-1下标中查找，否则，在0到pivot-1下标中查找，要注意先判断pivot-1是否>=0
――――――――――――――――――――――――――――――――
public int search(int[] nums, int target) {
        int len=nums.length;
        if(len==0) return -1;
        if(len==1) {
            return (target==nums[0])?0:-1;
        }
        int low=0,high=len-1,mid,pivot=-1;
        while(low<high){
            mid=(low+high)/2;            
            if(low==mid){
                pivot=nums[low]<nums[high]?low:high;
                break;
            }
            if(nums[mid]>nums[high]){
                low=mid;
            }else{
                high=mid;
            }            
        }
        if(pivot==-1){
            pivot=high;
        }
        if(target<=nums[len-1]){//pivot与len-1之间找
            return(this.bSearch(nums,pivot,len-1,target));
        }else{
            if(pivot-1>=0){
                //0到pivot-1
                return(this.bSearch(nums,0,pivot-1,target));
            }else{
                return -1;
            }
        }
    }
    
    public int bSearch(int[] srcArray,int pivot,int end,int des ){
        
        int low=pivot,high=end,middle;
        while(low <= high) {   
            middle = (low + high)/2;   
            if(des == srcArray[middle]) {   
                return middle;   
            }else if(des <srcArray[middle]) {   
                high = middle - 1;   
            }else {   
                low = middle + 1;   
            }  
        }  
        return -1;
        
        
    }
――――――――――――――――――――――――――――――――――――――――――――――――――――